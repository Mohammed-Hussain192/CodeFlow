<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>CodeFlow - Professional Go Compiler</title>
    <style>
        /* Reset and Base Styles */
        :root {
            --primary-color: #6c5ce7;
            --secondary-color: #fdcb6e;
            --dark-color: #2d3436;
            --light-color: #f8f9fa;
            --text-dark: #333;
            --text-light: #f0f2f5;
            --shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
            --transition: all 0.3s ease;
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background-color: var(--light-color);
            color: var(--text-dark);
            transition: var(--transition);
            line-height: 1.6;
        }

        body.dark {
            background-color: #121212;
            color: var(--text-light);
        }

        /* Navbar */
        #navbar {
            background-color: var(--primary-color);
            color: white;
            position: sticky;
            top: 0;
            padding: 15px 0;
            z-index: 1000;
            box-shadow: var(--shadow);
            transition: var(--transition);
        }

        body.dark #navbar {
            background-color: #1e1e1e;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.3);
        }

        .nav-container {
            display: flex;
            justify-content: space-between;
            align-items: center;
            max-width: 1200px;
            margin: 0 auto;
            padding: 0 20px;
        }

        .logo {
            font-size: 1.8rem;
            font-weight: 700;
            color: white;
            text-decoration: none;
        }

        .logo span {
            color: var(--secondary-color);
        }

        .nav-links {
            display: flex;
            gap: 25px;
        }

        .nav-links a {
            color: white;
            text-decoration: none;
            font-size: 1.1rem;
            font-weight: 500;
            transition: color 0.3s;
        }

        .nav-links a:hover {
            color: var(--secondary-color);
        }

        /* Theme Toggle */
        .theme-switch {
            position: relative;
            display: inline-block;
            width: 60px;
            height: 30px;
            margin-left: 20px;
        }

        .theme-switch input {
            opacity: 0;
            width: 0;
            height: 0;
        }

        .slider {
            position: absolute;
            cursor: pointer;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background-color: #ccc;
            transition: .4s;
            border-radius: 34px;
        }

        .slider:before {
            position: absolute;
            content: "";
            height: 22px;
            width: 22px;
            left: 4px;
            bottom: 4px;
            background-color: white;
            transition: .4s;
            border-radius: 50%;
        }

        input:checked + .slider {
            background-color: var(--primary-color);
        }

        body.dark input:checked + .slider {
            background-color: var(--secondary-color);
        }

        input:checked + .slider:before {
            transform: translateX(30px);
        }

        /* Compiler Container */
        .compiler-container {
            display: flex;
            min-height: calc(100vh - 70px);
            padding: 30px 0;
        }

        .editor-section, .output-section {
            flex: 1;
            padding: 0 15px;
        }

        .section-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 15px;
        }

        .section-title {
            font-size: 1.5rem;
            color: var(--primary-color);
        }

        body.dark .section-title {
            color: var(--secondary-color);
        }

        /* Editor Styling */
        .code-editor {
            width: 100%;
            height: 500px;
            border-radius: 8px;
            box-shadow: var(--shadow);
            overflow: hidden;
            font-family: 'Courier New', Courier, monospace;
            font-size: 14px;
            line-height: 1.5;
        }

        /* Output Styling */
        .output-window {
            width: 100%;
            height: 500px;
            background-color: white;
            border-radius: 8px;
            box-shadow: var(--shadow);
            padding: 15px;
            overflow-y: auto;
            font-family: 'Courier New', Courier, monospace;
            font-size: 14px;
            white-space: pre-wrap;
        }

        body.dark .output-window {
            background-color: #252525;
            color: white;
        }

        /* Console Styling */
        .console-output {
            color: inherit;
        }
        .console-error {
            color: #ff6b6b;
        }
        .console-warn {
            color: #fdcb6e;
        }
        .console-log {
            color: #55efc4;
        }

        /* Controls */
        .controls {
            display: flex;
            justify-content: space-between;
            margin-top: 20px;
        }

        .btn {
            padding: 10px 20px;
            background-color: var(--primary-color);
            color: white;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            transition: var(--transition);
            font-weight: 600;
        }

        .btn:hover {
            background-color: #0095C8;
            transform: translateY(-2px);
        }

        .btn-run {
            background-color: #00b894;
        }

        .btn-run:hover {
            background-color: #00a884;
        }

        .btn-clear {
            background-color: #d63031;
        }

        .btn-clear:hover {
            background-color: #c0392b;
        }

        /* Suggestions Panel */
        .suggestions-panel {
            margin-top: 20px;
            background-color: white;
            border-radius: 8px;
            box-shadow: var(--shadow);
            padding: 15px;
            max-height: 200px;
            overflow-y: auto;
        }

        body.dark .suggestions-panel {
            background-color: #252525;
        }

        .suggestion-title {
            font-size: 1.1rem;
            margin-bottom: 10px;
            color: var(--primary-color);
        }

        body.dark .suggestion-title {
            color: var(--secondary-color);
        }

        .suggestion-item {
            padding: 8px 10px;
            margin-bottom: 5px;
            border-radius: 4px;
            cursor: pointer;
            transition: var(--transition);
        }

        .suggestion-item:hover {
            background-color: rgba(0, 173, 216, 0.1);
        }

        body.dark .suggestion-item:hover {
            background-color: rgba(127, 213, 234, 0.1);
        }

        /* Footer */
        footer {
            background-color: var(--dark-color);
            color: white;
            text-align: center;
            padding: 20px;
        }

        /* Responsive Design */
        @media (max-width: 768px) {
            .compiler-container {
                flex-direction: column;
            }
            
            .editor-section, .output-section {
                padding: 15px;
            }
            
            .code-editor, .output-window {
                height: 300px;
            }
        }

        /* Loading Indicator */
        .loader {
            display: none;
            border: 3px solid #f3f3f3;
            border-top: 3px solid var(--primary-color);
            border-radius: 50%;
            width: 20px;
            height: 20px;
            animation: spin 1s linear infinite;
            margin-left: 10px;
        }

        body.dark .loader {
            border: 3px solid #444;
            border-top: 3px solid var(--secondary-color);
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        /* Status Message */
        .status-message {
            font-size: 0.9rem;
            color: #666;
            margin-top: 5px;
        }

        body.dark .status-message {
            color: #aaa;
        }

        /* Autocomplete Styles */
        .CodeMirror-hints {
            position: absolute;
            z-index: 10;
            overflow: hidden;
            list-style: none;
            margin: 0;
            padding: 2px;
            border-radius: 4px;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.2);
            background: white;
            font-size: 14px;
            font-family: 'Courier New', Courier, monospace;
            max-height: 20em;
            overflow-y: auto;
        }

        body.dark .CodeMirror-hints {
            background: #252525;
            color: white;
            border: 1px solid #444;
        }

        .CodeMirror-hint {
            margin: 0;
            padding: 6px 12px;
            border-radius: 2px;
            white-space: pre;
            color: var(--text-dark);
            cursor: pointer;
        }

        body.dark .CodeMirror-hint {
            color: var(--text-light);
        }

        .CodeMirror-hint-active {
            background-color: rgba(0, 173, 216, 0.2);
        }

        body.dark .CodeMirror-hint-active {
            background-color: rgba(127, 213, 234, 0.2);
        }
    </style>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.2/codemirror.min.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.2/theme/dracula.min.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.2/addon/hint/show-hint.min.css">
</head>
<body>
    <!-- Navbar -->
    <section id="navbar">
        <div class="nav-container">
            <a href="index.html" class="logo">Code<span>Flow</span></a>
            <div class="nav-links">
                <a href="/home">Home</a>
                <a href="/languages">Languages</a>
                <a href="/golang" class="active">Go Compiler</a>
                <label class="theme-switch">
                    <input type="checkbox" id="theme-toggle">
                    <span class="slider"></span>
                </label>
            </div>
        </div>
    </section>

    <!-- Compiler Main Content -->
    <div class="container">
        <div class="compiler-container">
            <!-- Editor Section -->
            <div class="editor-section">
                <div class="section-header">
                    <h3 class="section-title">Go Editor</h3>
                    <div>
                        <button class="btn btn-run" id="run-btn">
                            <i class="fas fa-play"></i> Compile & Run
                            <span class="loader" id="run-loader"></span>
                        </button>
                    </div>
                </div>
                <textarea id="code-editor" class="code-editor">// Welcome to CodeFlow Go Compiler
// Type your Go code here and click Run

package main

import (
	"fmt"
)

// Factorial function
func factorial(n int) int {
	if n == 0 {
		return 1
	}
	return n * factorial(n-1)
}

func main() {
	fmt.Println("Hello, World!")

	// Example: Calculate factorial
	number := 5
	fmt.Printf("Factorial of %d is: %d\n", number, factorial(number))

	// Example: Slice usage
	fruits := []string{"Apple", "Banana", "Cherry"}
	fmt.Println("Fruits:")
	for i, fruit := range fruits {
		fmt.Printf("%d. %s\n", i+1, fruit)
	}

	// Example: Map usage
	capitals := map[string]string{
		"France": "Paris",
		"Japan":  "Tokyo",
	}
	for country, capital := range capitals {
		fmt.Printf("The capital of %s is %s\n", country, capital)
	}
}</textarea>
                
                <!-- Suggestions Panel -->
                <div class="suggestions-panel">
                    <h4 class="suggestion-title">Go Code Suggestions</h4>
                    <div id="suggestions-list">
                        <div class="suggestion-item" onclick="insertSuggestion('package main')">package main - Main package</div>
                        <div class="suggestion-item" onclick="insertSuggestion('import \"fmt\"')">import "fmt" - Format package</div>
                        <div class="suggestion-item" onclick="insertSuggestion('func main() {}')">func main() - Entry point</div>
                        <div class="suggestion-item" onclick="insertSuggestion('fmt.Println()')">fmt.Println - Print with newline</div>
                        <div class="suggestion-item" onclick="insertSuggestion('fmt.Printf()')">fmt.Printf - Formatted print</div>
                        <div class="suggestion-item" onclick="insertSuggestion('var name type')">var - Variable declaration</div>
                        <div class="suggestion-item" onclick="insertSuggestion('const name = value')">const - Constant declaration</div>
                        <div class="suggestion-item" onclick="insertSuggestion('for i := 0; i < n; i++ {}')">for loop - Classic iteration</div>
                        <div class="suggestion-item" onclick="insertSuggestion('for index, value := range collection {}')">range - Iterate over collections</div>
                        <div class="suggestion-item" onclick="insertSuggestion('if condition {}')">if statement - Conditional</div>
                        <div class="suggestion-item" onclick="insertSuggestion('struct {}')">struct - Define a structure</div>
                        <div class="suggestion-item" onclick="insertSuggestion('map[keyType]valueType')">map - Key-value collection</div>
                        <div class="suggestion-item" onclick="insertSuggestion('[]type{}')">slice - Dynamic array</div>
                    </div>
                </div>
                <div class="status-message" id="editor-status"></div>
            </div>
            
            <!-- Output Section -->
            <div class="output-section">
                <div class="section-header">
                    <h3 class="section-title">Console Output</h3>
                    <div>
                        <button class="btn btn-clear" id="clear-btn">
                            <i class="fas fa-trash"></i> Clear
                        </button>
                    </div>
                </div>
                <div id="output-window" class="output-window">Compilation and runtime output will appear here...</div>
                <div class="status-message" id="output-status"></div>
            </div>
        </div>
    </div>

    <!-- Footer -->
    <footer>
        <p>&copy; <span id="current-year"></span> CodeFlow. All rights reserved.</p>
    </footer>

    <!-- Scripts -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.2/codemirror.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.2/mode/go/go.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.2/addon/edit/matchbrackets.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.2/addon/hint/show-hint.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.2/addon/hint/anyword-hint.min.js"></script>
    
    <script>
        // Initialize CodeMirror Editor for Go
        const editor = CodeMirror.fromTextArea(document.getElementById('code-editor'), {
            mode: 'text/x-go',
            theme: 'default',
            lineNumbers: true,
            indentUnit: 4,
            tabSize: 4,
            lineWrapping: true,
            autoCloseBrackets: true,
            matchBrackets: true,
            extraKeys: {
                "Ctrl-Space": "autocomplete",
                "Ctrl-Enter": executeCode,
                "Tab": function(cm) {
                    if (cm.somethingSelected()) {
                        cm.indentSelection("add");
                    } else {
                        cm.execCommand("autocomplete");
                    }
                }
            },
            hintOptions: {
                hint: CodeMirror.hint.anyword,
                completeSingle: false,
                alignWithWord: true,
                closeCharacters: /[\s()\[\]{};:>,]/,
                goKeywords: [
                    // Go keywords
                    "break", "case", "chan", "const", "continue", "default", "defer",
                    "else", "fallthrough", "for", "func", "go", "goto", "if", "import",
                    "interface", "map", "package", "range", "return", "select", "struct",
                    "switch", "type", "var",
                    // Common Go types and functions
                    "bool", "byte", "complex64", "complex128", "error", "float32", "float64",
                    "int", "int8", "int16", "int32", "int64", "rune", "string",
                    "uint", "uint8", "uint16", "uint32", "uint64", "uintptr",
                    "append", "cap", "close", "complex", "copy", "delete", "imag",
                    "len", "make", "new", "panic", "print", "println", "real", "recover",
                    // Common packages
                    "fmt", "os", "io", "math", "strings", "time", "errors", "sort", "strconv"
                ]
            }
        });

        // DOM Elements
        const runBtn = document.getElementById('run-btn');
        const clearBtn = document.getElementById('clear-btn');
        const outputWindow = document.getElementById('output-window');
        const runLoader = document.getElementById('run-loader');
        const editorStatus = document.getElementById('editor-status');
        const outputStatus = document.getElementById('output-status');
        const currentYear = document.getElementById('current-year');

        // Set current year in footer
        currentYear.textContent = new Date().getFullYear();

        // Theme Toggle Functionality
        const toggleSwitch = document.getElementById('theme-toggle');
        
        function switchTheme(e) {
            if (e.target.checked) {
                document.body.classList.add('dark');
                editor.setOption('theme', 'dracula');
                localStorage.setItem('theme', 'dark');
            } else {
                document.body.classList.remove('dark');
                editor.setOption('theme', 'default');
                localStorage.setItem('theme', 'light');
            }
        }
        
        toggleSwitch.addEventListener('change', switchTheme);
        
        // Check for saved theme preference
        const currentTheme = localStorage.getItem('theme');
        if (currentTheme === 'dark') {
            document.body.classList.add('dark');
            toggleSwitch.checked = true;
            editor.setOption('theme', 'dracula');
        }

        // Using Piston API for Go execution
        const API_ENDPOINT = "https://emkc.org/api/v2/piston/execute";

        // Execute Go Code
        async function executeCode() {
            const code = editor.getValue();
            
            // Validate code
            if (!code.trim()) {
                updateStatus(editorStatus, 'Please enter some Go code', 'error');
                return;
            }
            
            // Show loading state
            runLoader.style.display = 'inline-block';
            runBtn.disabled = true;
            updateStatus(editorStatus, 'Compiling and running...', 'info');
            outputWindow.textContent = 'Compiling and running your Go code...';
            
            try {
                const response = await fetch(API_ENDPOINT, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        language: 'go',
                        version: '1.16.2',
                        files: [{
                            content: code
                        }]
                    })
                });
                
                if (!response.ok) {
                    throw new Error(`API request failed with status ${response.status}`);
                }
                
                const data = await response.json();
                
                if (data.compile && data.compile.stderr) {
                    outputWindow.innerHTML = `<div class="console-error">Compilation Error:\n${data.compile.stderr}</div>`;
                    updateStatus(outputStatus, 'Compilation failed', 'error');
                } else if (data.run.stderr) {
                    outputWindow.innerHTML = `<div class="console-error">Runtime Error:\n${data.run.stderr}</div>`;
                    updateStatus(outputStatus, 'Runtime error', 'error');
                } else {
                    outputWindow.innerHTML = `<div class="console-log">${data.run.stdout || "Program executed successfully (no output)"}</div>`;
                    updateStatus(outputStatus, 'Execution completed', 'success');
                }
            } catch (error) {
                outputWindow.innerHTML = `<div class="console-error">Error: ${error.message}</div>`;
                updateStatus(outputStatus, 'Connection error', 'error');
                console.error('Execution error:', error);
            } finally {
                // Reset loading state
                runLoader.style.display = 'none';
                runBtn.disabled = false;
            }
        }

        // Update status message
        function updateStatus(element, message, type) {
            element.textContent = message;
            element.style.color = type === 'error' ? '#ff6b6b' : 
                                 type === 'success' ? '#00b894' : 
                                 type === 'info' ? (document.body.classList.contains('dark') ? '#7FD5EA' : '#00ADD8') : 
                                 '#666';
        }

        // Clear Output
        clearBtn.addEventListener('click', () => {
            outputWindow.innerHTML = '';
            updateStatus(outputStatus, '', '');
        });

        // Run Button
        runBtn.addEventListener('click', executeCode);

        // Insert Suggestion
        function insertSuggestion(code) {
            const cursor = editor.getCursor();
            editor.replaceRange(code + '\n', cursor);
            editor.focus();
            updateStatus(editorStatus, 'Suggestion inserted', 'info');
            setTimeout(() => updateStatus(editorStatus, '', ''), 2000);
        }

        // Initialize with empty status
        updateStatus(editorStatus, '', '');
        updateStatus(outputStatus, '', '');
    </script>
</body>
</html>