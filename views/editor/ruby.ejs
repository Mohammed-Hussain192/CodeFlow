<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>CodeFlow - Professional Ruby Compiler</title>
    <style>
        /* Reset and Base Styles */
        :root {
            --primary-color: #6c5ce7;
            --secondary-color: #fdcb6e;
            --dark-color: #2d3436;
            --light-color: #f8f9fa;
            --text-dark: #333;
            --text-light: #f0f2f5;
            --shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
            --transition: all 0.3s ease;
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background-color: var(--light-color);
            color: var(--text-dark);
            transition: var(--transition);
            line-height: 1.6;
        }

        body.dark {
            background-color: #121212;
            color: var(--text-light);
        }

        /* Navbar */
        #navbar {
            background-color: var(--primary-color);
            color: white;
            position: sticky;
            top: 0;
            padding: 15px 0;
            z-index: 1000;
            box-shadow: var(--shadow);
            transition: var(--transition);
        }

        body.dark #navbar {
            background-color: #1e1e1e;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.3);
        }

        .nav-container {
            display: flex;
            justify-content: space-between;
            align-items: center;
            max-width: 1200px;
            margin: 0 auto;
            padding: 0 20px;
        }

        .logo {
            font-size: 1.8rem;
            font-weight: 700;
            color: white;
            text-decoration: none;
        }

        .logo span {
            color: var(--secondary-color);
        }

        .nav-links {
            display: flex;
            gap: 25px;
        }

        .nav-links a {
            color: white;
            text-decoration: none;
            font-size: 1.1rem;
            font-weight: 500;
            transition: color 0.3s;
        }

        .nav-links a:hover {
            color: var(--secondary-color);
        }

        /* Theme Toggle */
        .theme-switch {
            position: relative;
            display: inline-block;
            width: 60px;
            height: 30px;
            margin-left: 20px;
        }

        .theme-switch input {
            opacity: 0;
            width: 0;
            height: 0;
        }

        .slider {
            position: absolute;
            cursor: pointer;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background-color: #ccc;
            transition: .4s;
            border-radius: 34px;
        }

        .slider:before {
            position: absolute;
            content: "";
            height: 22px;
            width: 22px;
            left: 4px;
            bottom: 4px;
            background-color: white;
            transition: .4s;
            border-radius: 50%;
        }

        input:checked + .slider {
            background-color: var(--primary-color);
        }

        body.dark input:checked + .slider {
            background-color: var(--secondary-color);
        }

        input:checked + .slider:before {
            transform: translateX(30px);
        }

        /* Compiler Container */
        .compiler-container {
            display: flex;
            min-height: calc(100vh - 70px);
            padding: 30px 0;
        }

        .editor-section, .output-section {
            flex: 1;
            padding: 0 15px;
        }

        .section-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 15px;
        }

        .section-title {
            font-size: 1.5rem;
            color: var(--primary-color);
        }

        body.dark .section-title {
            color: var(--secondary-color);
        }

        /* Editor Styling */
        .code-editor {
            width: 100%;
            height: 500px;
            border-radius: 8px;
            box-shadow: var(--shadow);
            overflow: hidden;
            font-family: 'Courier New', Courier, monospace;
            font-size: 14px;
            line-height: 1.5;
        }

        /* Output Styling */
        .output-window {
            width: 100%;
            height: 500px;
            background-color: white;
            border-radius: 8px;
            box-shadow: var(--shadow);
            padding: 15px;
            overflow-y: auto;
            font-family: 'Courier New', Courier, monospace;
            font-size: 14px;
            white-space: pre-wrap;
        }

        body.dark .output-window {
            background-color: #252525;
            color: white;
        }

        /* Console Styling */
        .console-output {
            color: inherit;
        }
        .console-error {
            color: #ff6b6b;
        }
        .console-warn {
            color: #fdcb6e;
        }
        .console-log {
            color: #55efc4;
        }

        /* Controls */
        .controls {
            display: flex;
            justify-content: space-between;
            margin-top: 20px;
        }

        .btn {
            padding: 10px 20px;
            background-color: var(--primary-color);
            color: white;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            transition: var(--transition);
            font-weight: 600;
        }

        .btn:hover {
            background-color: #5a4bd1;
            transform: translateY(-2px);
        }

        .btn-run {
            background-color: #00b894;
        }

        .btn-run:hover {
            background-color: #00a884;
        }

        .btn-clear {
            background-color: #d63031;
        }

        .btn-clear:hover {
            background-color: #c0392b;
        }

        /* Suggestions Panel */
        .suggestions-panel {
            margin-top: 20px;
            background-color: white;
            border-radius: 8px;
            box-shadow: var(--shadow);
            padding: 15px;
            max-height: 200px;
            overflow-y: auto;
        }

        body.dark .suggestions-panel {
            background-color: #252525;
        }

        .suggestion-title {
            font-size: 1.1rem;
            margin-bottom: 10px;
            color: var(--primary-color);
        }

        body.dark .suggestion-title {
            color: var(--secondary-color);
        }

        .suggestion-item {
            padding: 8px 10px;
            margin-bottom: 5px;
            border-radius: 4px;
            cursor: pointer;
            transition: var(--transition);
        }

        .suggestion-item:hover {
            background-color: rgba(108, 92, 231, 0.1);
        }

        body.dark .suggestion-item:hover {
            background-color: rgba(253, 203, 110, 0.1);
        }

        /* Footer */
        footer {
            background-color: var(--dark-color);
            color: white;
            text-align: center;
            padding: 20px;
        }

        /* Responsive Design */
        @media (max-width: 768px) {
            .compiler-container {
                flex-direction: column;
            }
            
            .editor-section, .output-section {
                padding: 15px;
            }
            
            .code-editor, .output-window {
                height: 300px;
            }
        }

        /* Loading Indicator */
        .loader {
            display: none;
            border: 3px solid #f3f3f3;
            border-top: 3px solid var(--primary-color);
            border-radius: 50%;
            width: 20px;
            height: 20px;
            animation: spin 1s linear infinite;
            margin-left: 10px;
        }

        body.dark .loader {
            border: 3px solid #444;
            border-top: 3px solid var(--secondary-color);
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        /* Status Message */
        .status-message {
            font-size: 0.9rem;
            color: #666;
            margin-top: 5px;
        }

        body.dark .status-message {
            color: #aaa;
        }
    </style>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
</head>
<body>
    <!-- Navbar -->
    <section id="navbar">
        <div class="nav-container">
            <a href="index.html" class="logo">Code<span>Flow</span></a>
            <div class="nav-links">
                <a href="/home">Home</a>
                <a href="/languages">Languages</a>
                <a href="/ruby" class="active">Ruby Compiler</a>
                <label class="theme-switch">
                    <input type="checkbox" id="theme-toggle">
                    <span class="slider"></span>
                </label>
            </div>
        </div>
    </section>

    <!-- Compiler Main Content -->
    <div class="container">
        <div class="compiler-container">
            <!-- Editor Section -->
            <div class="editor-section">
                <div class="section-header">
                    <h3 class="section-title">Ruby Editor</h3>
                    <div>
                        <button class="btn btn-run" id="run-btn">
                            <i class="fas fa-play"></i> Run Code
                            <span class="loader" id="run-loader"></span>
                        </button>
                    </div>
                </div>
                <textarea id="code-editor" class="code-editor"># Welcome to CodeFlow Ruby Compiler
# Type your Ruby code here and click Run

# Example: Hello World
puts "Hello, World!"

# Example: Calculate factorial
def factorial(n)
  return 1 if n == 0
  n * factorial(n - 1)
end

number = 5
puts "Factorial of #{number} is: #{factorial(number)}"

# Example: Array usage
numbers = [1, 2, 3, 4, 5]
print "Array elements: "
numbers.each { |num| print "#{num} " }
puts</textarea>
                
                <!-- Suggestions Panel -->
                <div class="suggestions-panel">
                    <h4 class="suggestion-title">Code Suggestions</h4>
                    <div id="suggestions-list">
                        <div class="suggestion-item" data-code="# Your Ruby code here">Comment - Single line</div>
                        <div class="suggestion-item" data-code="puts \"Hello, World!\""">puts - Output text</div>
                        <div class="suggestion-item" data-code="if condition\n  # Your code here\nend">if statement - Conditional</div>
                        <div class="suggestion-item" data-code="for i in 0..10\n  # Your code here\nend">for loop - Iteration</div>
                        <div class="suggestion-item" data-code="while condition\n  # Your code here\nend">while loop - Iteration</div>
                        <div class="suggestion-item" data-code="def method_name\n  # Your code here\nend">def - Define method</div>
                        <div class="suggestion-item" data-code="array = [1, 2, 3]">array - Create array</div>
                        <div class="suggestion-item" data-code="array.each do |item|\n  # Your code here\nend">each - Loop through array</div>
                    </div>
                </div>
                <div class="status-message" id="editor-status"></div>
            </div>
            
            <!-- Output Section -->
            <div class="output-section">
                <div class="section-header">
                    <h3 class="section-title">Console Output</h3>
                    <div>
                        <button class="btn btn-clear" id="clear-btn">
                            <i class="fas fa-trash"></i> Clear
                        </button>
                    </div>
                </div>
                <div id="output-window" class="output-window">Ruby execution output will appear here...</div>
                <div class="status-message" id="output-status"></div>
            </div>
        </div>
    </div>

    <!-- Footer -->
    <footer>
        <p>&copy; <span id="current-year"></span> CodeFlow. All rights reserved.</p>
    </footer>
    
    <script>
        // Simple initialization
        document.addEventListener('DOMContentLoaded', function() {
            // Get DOM elements
            const codeEditor = document.getElementById('code-editor');
            const runBtn = document.getElementById('run-btn');
            const clearBtn = document.getElementById('clear-btn');
            const outputWindow = document.getElementById('output-window');
            const runLoader = document.getElementById('run-loader');
            const editorStatus = document.getElementById('editor-status');
            const outputStatus = document.getElementById('output-status');
            const currentYear = document.getElementById('current-year');
            const suggestionItems = document.querySelectorAll('.suggestion-item');
            const toggleSwitch = document.getElementById('theme-toggle');
            
            // Set current year
            currentYear.textContent = new Date().getFullYear();
            
            // Make the textarea work directly
            codeEditor.style.width = '100%';
            codeEditor.style.height = '500px';
            codeEditor.style.fontFamily = 'Courier New, Courier, monospace';
            codeEditor.style.fontSize = '14px';
            codeEditor.style.lineHeight = '1.5';
            codeEditor.style.padding = '10px';
            codeEditor.style.border = '1px solid #ccc';
            codeEditor.style.borderRadius = '8px';
            codeEditor.style.resize = 'vertical';
            codeEditor.style.overflow = 'auto';
            codeEditor.style.scrollbarWidth = 'thin';
            codeEditor.style.scrollbarColor = 'var(--primary-color) #f1f1f1';
            
            // Add custom scrollbar styling
            const style = document.createElement('style');
            style.textContent = `
                #code-editor::-webkit-scrollbar {
                    width: 12px;
                    height: 12px;
                }
                
                #code-editor::-webkit-scrollbar-track {
                    background: #f1f1f1;
                    border-radius: 6px;
                }
                
                #code-editor::-webkit-scrollbar-thumb {
                    background-color: var(--primary-color);
                    border-radius: 6px;
                    border: 3px solid #f1f1f1;
                }
                
                #code-editor::-webkit-scrollbar-thumb:hover {
                    background-color: #5a4bd1;
                }
                
                body.dark #code-editor::-webkit-scrollbar-track {
                    background: #333;
                }
                
                body.dark #code-editor::-webkit-scrollbar-thumb {
                    background-color: var(--secondary-color);
                    border: 3px solid #333;
                }
                
                body.dark #code-editor::-webkit-scrollbar-thumb:hover {
                    background-color: #e6b84c;
                }
            `;
            document.head.appendChild(style);
            
            // Theme toggle functionality
            toggleSwitch.addEventListener('change', function(e) {
                if (e.target.checked) {
                    document.body.classList.add('dark');
                    codeEditor.style.backgroundColor = '#252525';
                    codeEditor.style.color = 'white';
                    codeEditor.style.borderColor = '#444';
                    localStorage.setItem('theme', 'dark');
                } else {
                    document.body.classList.remove('dark');
                    codeEditor.style.backgroundColor = 'white';
                    codeEditor.style.color = 'black';
                    codeEditor.style.borderColor = '#ccc';
                    localStorage.setItem('theme', 'light');
                }
            });
            
            // Check for saved theme preference
            const currentTheme = localStorage.getItem('theme');
            if (currentTheme === 'dark') {
                document.body.classList.add('dark');
                toggleSwitch.checked = true;
                codeEditor.style.backgroundColor = '#252525';
                codeEditor.style.color = 'white';
                codeEditor.style.borderColor = '#444';
            }
            
            // Run code function
            function runCode() {
                const code = codeEditor.value;
                
                // Validate code
                if (!code.trim()) {
                    editorStatus.textContent = "Please enter some Ruby code";
                    editorStatus.style.color = "#ff6b6b";
                    return;
                }
                
                // Show loading state
                runLoader.style.display = 'inline-block';
                runBtn.disabled = true;
                editorStatus.textContent = "Processing Ruby code...";
                editorStatus.style.color = document.body.classList.contains('dark') ? "#fdcb6e" : "#6c5ce7";
                outputWindow.textContent = "Processing your Ruby code...";
                
                // Simulate processing delay
                setTimeout(() => {
                    // Simple client-side simulation
                    try {
                        // Basic syntax validation
                        if (code.includes('puts') || code.includes('print')) {
                            // Extract strings that would be printed
                            const outputLines = [];
                            const lines = code.split('\n');
                            
                            for (const line of lines) {
                                if (line.includes('puts') || line.includes('print')) {
                                    // Extract string content (very basic implementation)
                                    const match = line.match(/puts\s+["'](.*?)["']|print\s+["'](.*?)["']/);
                                    if (match) {
                                        outputLines.push(match[1] || match[2] || '');
                                    }
                                }
                            }
                            
                            if (outputLines.length > 0) {
                                outputWindow.innerHTML = `<div class="console-log">${outputLines.join('\n')}</div>`;
                                outputStatus.textContent = "Simulation completed";
                                outputStatus.style.color = "#00b894";
                            } else {
                                outputWindow.innerHTML = `<div class="console-log">Program executed successfully (no output detected)</div>`;
                                outputStatus.textContent = "Simulation completed";
                                outputStatus.style.color = "#00b894";
                            }
                        } else {
                            outputWindow.innerHTML = `<div class="console-log">Program executed successfully (no output detected)</div>`;
                            outputStatus.textContent = "Simulation completed";
                            outputStatus.style.color = "#00b894";
                        }
                    } catch (error) {
                        outputWindow.innerHTML = `<div class="console-error">Error in simulation: ${error.message}</div>`;
                        outputStatus.textContent = "Simulation error";
                        outputStatus.style.color = "#ff6b6b";
                    }
                    
                    // Reset loading state
                    runLoader.style.display = 'none';
                    runBtn.disabled = false;
                }, 1000);
            }
            
            // Clear output
            clearBtn.addEventListener('click', () => {
                outputWindow.innerHTML = '';
                outputStatus.textContent = '';
            });
            
            // Run button
            runBtn.addEventListener('click', runCode);
            
            // Insert suggestion
            function insertSuggestion(code) {
                const cursorPos = codeEditor.selectionStart;
                const textBefore = codeEditor.value.substring(0, cursorPos);
                const textAfter = codeEditor.value.substring(codeEditor.selectionEnd);
                
                codeEditor.value = textBefore + code + '\n' + textAfter;
                
                // Set cursor position after inserted code
                const newCursorPos = cursorPos + code.length + 1;
                codeEditor.setSelectionRange(newCursorPos, newCursorPos);
                codeEditor.focus();
                
                editorStatus.textContent = "Suggestion inserted";
                editorStatus.style.color = document.body.classList.contains('dark') ? "#fdcb6e" : "#6c5ce7";
                setTimeout(() => {
                    editorStatus.textContent = "";
                }, 2000);
            }
            
            // Add event listeners to suggestion items
            suggestionItems.forEach(item => {
                item.addEventListener('click', function() {
                    const code = this.getAttribute('data-code');
                    insertSuggestion(code);
                });
            });
        });
    </script>
</body>
</html>
